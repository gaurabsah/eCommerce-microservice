package com.cart.service;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.cart.client.ProductServiceClient;
import com.cart.dto.CartItemDTO;
import com.cart.dto.ProductDTO;
import com.cart.entity.CartItem;
import com.cart.exception.InsufficientResourcesException;
import com.cart.repository.CartItemRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CartItemServiceImpl implements CartItemService {

	private final CartItemRepository cartItemRepository;
	private final ModelMapper modelMapper;
	private static final Logger log = LoggerFactory.getLogger(CartItemServiceImpl.class);
	private final ProductServiceClient productServiceClient;

	@Override
	public CartItemDTO addToCart(CartItemDTO item) {
		log.info("inside addToCart()");
		ProductDTO product = productServiceClient.getProductById(item.getProductId());
		if (product.getStock() < item.getQuantity()) {
			throw new InsufficientResourcesException("Insufficient stock for product: " + product.getProductName());
		}
		CartItem cartItem = modelMapper.map(item, CartItem.class);
		CartItem addedItems = cartItemRepository.save(cartItem);
		log.info("Item Added to Cart Successfully...");
		return modelMapper.map(addedItems, CartItemDTO.class);
	}

	@Override
	public List<CartItemDTO> getCartItems(Long userId) {
		log.info("inside getCartItems()");
		List<CartItem> items = cartItemRepository.findByUserId(userId);
		log.info("Items fetched Successfully...");
		return items.stream().map(i -> modelMapper.map(i, CartItemDTO.class)).collect(Collectors.toList());
	}

	@Override
	public void clearCart(Long userId) {
		log.info("inside clearCart()");
		List<CartItem> items = cartItemRepository.findByUserId(userId);
		log.info("Item removed from Cart Successfully...");
		cartItemRepository.deleteAll(items);
	}

}
